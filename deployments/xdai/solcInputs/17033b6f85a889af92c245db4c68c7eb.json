{
  "language": "Solidity",
  "sources": {
    "contracts/ExampleClient.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.6.12;\n\nimport \"@api3/airnode-protocol/contracts/AirnodeClient.sol\";\n\n\ncontract ExampleClient is AirnodeClient {\n    event RequestMade(bytes32 indexed requestId);\n    event RequestFulfilled(bytes32 indexed requestId, int256 data);\n\n    mapping(bytes32 => bool) public incomingFulfillments;\n    mapping(bytes32 => int256) public fulfilledData;\n\n    constructor (address airnodeAddress)\n        public\n        AirnodeClient(airnodeAddress)\n    {}\n\n    // Parameters are encoded off-chain\n    function makeRequest(\n        bytes32 providerId,\n        bytes32 endpointId,\n        uint256 requesterInd,\n        address designatedWallet,\n        bytes calldata parameters\n        )\n        external\n    {\n        bytes32 requestId = airnode.makeFullRequest(\n            providerId,\n            endpointId,\n            requesterInd,\n            designatedWallet,\n            address(this),\n            this.fulfill.selector,\n            parameters\n            );\n        incomingFulfillments[requestId] = true;\n        emit RequestMade(requestId);\n    }\n\n    // Parameters are encoded on-chain, refer to:\n    // https://github.com/api3dao/api3-docs/blob/e793f7ec876e0a8e042f92388c6686f639c80458/airnode/airnode-abi-specifications.md\n    function encodeAndMakeRequest(\n        bytes32 providerId,\n        bytes32 endpointId,\n        uint256 requesterInd,\n        address designatedWallet,\n        bytes32 id,\n        bytes32 date\n        )\n        external\n    {\n        bytes memory parameters = abi.encode(\n            bytes32(\"1bb\"),\n            bytes32(\"id\"), id,\n            bytes32(\"date\"), date\n            );\n        bytes32 requestId = airnode.makeFullRequest(\n            providerId,\n            endpointId,\n            requesterInd,\n            designatedWallet,\n            address(this),\n            this.fulfill.selector,\n            parameters\n            );\n        incomingFulfillments[requestId] = true;\n        emit RequestMade(requestId);\n    }\n\n    function fulfill(\n        bytes32 requestId,\n        uint256 statusCode,\n        int256 data\n        )\n        external\n        onlyAirnode()\n    {\n        require(incomingFulfillments[requestId], \"No such request made\");\n        delete incomingFulfillments[requestId];\n        if (statusCode == 0)\n        {\n            fulfilledData[requestId] = data;\n        }\n        emit RequestFulfilled(requestId, data);\n    }\n}\n"
    },
    "@api3/airnode-protocol/contracts/AirnodeClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./interfaces/IAirnodeClient.sol\";\nimport \"./interfaces/IAirnode.sol\";\n\n\n/// @title The contract to be inherited from to use Airnode to make requests\ncontract AirnodeClient is IAirnodeClient {\n    IAirnode public airnode;\n\n    /// @dev Airnode address is set at deployment. If you need to be able to\n    /// update it, you will have to implement that functionality (and probably\n    /// put it behind onlyOwner).\n    /// @param airnodeAddress Airnode contract address\n    constructor (address airnodeAddress)\n        public\n    {\n        airnode = IAirnode(airnodeAddress);\n    }\n\n    /// @notice Returns the Airnode contract address used by this client\n    /// @return _airnodeAddress Airnode contract address\n    function airnodeAddress()\n        external\n        view\n        override\n        returns(address _airnodeAddress)\n    {\n        _airnodeAddress = address(airnode);\n    }\n\n    /// @dev Reverts if the caller is not the Airnode contract\n    /// Use it as a modifier for fulfill and error callback methods\n    modifier onlyAirnode()\n    {\n        require(\n            msg.sender == address(airnode),\n            \"Caller not the Airnode contract\"\n            );\n        _;\n    }\n}\n"
    },
    "@api3/airnode-protocol/contracts/interfaces/IAirnodeClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n\ninterface IAirnodeClient {\n  function airnodeAddress()\n      external\n      view\n      returns(address _airnodeAddress);\n}\n"
    },
    "@api3/airnode-protocol/contracts/interfaces/IAirnode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IEndpointStore.sol\";\nimport \"./ITemplateStore.sol\";\n\n\ninterface IAirnode is IEndpointStore, ITemplateStore {\n    event ClientRequestCreated(\n        bytes32 indexed providerId,\n        bytes32 indexed requestId,\n        uint256 noRequests,\n        address clientAddress,\n        bytes32 templateId,\n        uint256 requesterIndex,\n        address designatedWallet,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId,\n        bytes parameters\n        );\n\n    event ClientShortRequestCreated(\n        bytes32 indexed providerId,\n        bytes32 indexed requestId,\n        uint256 noRequests,\n        address clientAddress,\n        bytes32 templateId,\n        bytes parameters\n        );\n\n    event ClientFullRequestCreated(\n        bytes32 indexed providerId,\n        bytes32 indexed requestId,\n        uint256 noRequests,\n        address clientAddress,\n        bytes32 endpointId,\n        uint256 requesterIndex,\n        address designatedWallet,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId,\n        bytes parameters\n        );\n\n    event ClientRequestFulfilled(\n        bytes32 indexed providerId,\n        bytes32 indexed requestId,\n        uint256 statusCode,\n        bytes32 data\n        );\n\n    event ClientRequestFulfilledWithBytes(\n        bytes32 indexed providerId,\n        bytes32 indexed requestId,\n        uint256 statusCode,\n        bytes data\n        );\n\n    event ClientRequestFailed(\n        bytes32 indexed providerId,\n        bytes32 indexed requestId\n        );\n\n    function makeRequest(\n        bytes32 templateId,\n        uint256 requesterIndex,\n        address designatedWallet,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId,\n        bytes calldata parameters\n        )\n        external\n        returns (bytes32 requestId);\n\n    function makeShortRequest(\n        bytes32 templateId,\n        bytes calldata parameters\n        )\n        external\n        returns (bytes32 requestId);\n\n    function makeFullRequest(\n        bytes32 providerId,\n        bytes32 endpointId,\n        uint256 requesterIndex,\n        address designatedWallet,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId,\n        bytes calldata parameters\n        )\n        external\n        returns (bytes32 requestId);\n\n    function fulfill(\n        bytes32 requestId,\n        bytes32 providerId,\n        uint256 statusCode,\n        bytes32 data,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId\n        )\n        external\n        returns(\n            bool callSuccess,\n            bytes memory callData\n        );\n\n    function fulfillBytes(\n        bytes32 requestId,\n        bytes32 providerId,\n        uint256 statusCode,\n        bytes calldata data,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId\n        )\n        external\n        returns(\n            bool callSuccess,\n            bytes memory callData\n        );\n\n    function fail(\n        bytes32 requestId,\n        bytes32 providerId,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId\n        )\n        external;\n}\n"
    },
    "@api3/airnode-protocol/contracts/interfaces/IEndpointStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IProviderStore.sol\";\n\n\ninterface IEndpointStore is IProviderStore {\n    event EndpointUpdated(\n        bytes32 indexed providerId,\n        bytes32 indexed endpointId,\n        address[] authorizers\n        );\n\n    function updateEndpointAuthorizers(\n        bytes32 providerId,\n        bytes32 endpointId,\n        address[] calldata authorizers\n        )\n        external;\n\n    function getEndpointAuthorizers(\n        bytes32 providerId,\n        bytes32 endpointId\n        )\n        external\n        view\n        returns(address[] memory authorizers);\n}\n"
    },
    "@api3/airnode-protocol/contracts/interfaces/ITemplateStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n\ninterface ITemplateStore {\n    event TemplateCreated(\n        bytes32 indexed templateId,\n        bytes32 providerId,\n        bytes32 endpointId,\n        uint256 requesterIndex,\n        address designatedWallet,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId,\n        bytes parameters\n        );\n\n    function createTemplate(\n        bytes32 providerId,\n        bytes32 endpointId,\n        uint256 requesterIndex,\n        address designatedWallet,\n        address fulfillAddress,\n        bytes4 fulfillFunctionId,\n        bytes calldata parameters\n        )\n        external\n        returns (bytes32 templateId);\n\n    function getTemplate(bytes32 templateId)\n        external\n        view\n        returns (\n            bytes32 providerId,\n            bytes32 endpointId,\n            uint256 requesterIndex,\n            address designatedWallet,\n            address fulfillAddress,\n            bytes4 fulfillFunctionId,\n            bytes memory parameters\n        );\n}\n"
    },
    "@api3/airnode-protocol/contracts/interfaces/IProviderStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IRequesterStore.sol\";\n\n\ninterface IProviderStore is IRequesterStore {\n    event ProviderCreated(\n        bytes32 indexed providerId,\n        address admin,\n        string xpub\n        );\n\n    event ProviderUpdated(\n        bytes32 indexed providerId,\n        address admin\n        );\n\n    event WithdrawalRequested(\n        bytes32 indexed providerId,\n        uint256 indexed requesterIndex,\n        bytes32 indexed withdrawalRequestId,\n        address designatedWallet,\n        address destination\n        );\n\n    event WithdrawalFulfilled(\n        bytes32 indexed providerId,\n        uint256 indexed requesterIndex,\n        bytes32 indexed withdrawalRequestId,\n        address designatedWallet,\n        address destination,\n        uint256 amount\n        );\n\n    function createProvider(\n        address admin,\n        string calldata xpub\n        )\n        external\n        payable\n        returns (bytes32 providerId);\n\n    function updateProvider(\n        bytes32 providerId,\n        address admin\n        )\n        external;\n\n    function requestWithdrawal(\n        bytes32 providerId,\n        uint256 requesterIndex,\n        address designatedWallet,\n        address destination\n    )\n        external;\n\n    function fulfillWithdrawal(\n        bytes32 withdrawalRequestId,\n        bytes32 providerId,\n        uint256 requesterIndex,\n        address destination\n        )\n        external\n        payable;\n\n    function getProvider(bytes32 providerId)\n        external\n        view\n        returns (\n            address admin,\n            string memory xpub\n        );\n}\n"
    },
    "@api3/airnode-protocol/contracts/interfaces/IRequesterStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n\ninterface IRequesterStore {\n    event RequesterCreated(\n        uint256 indexed requesterIndex,\n        address admin\n        );\n\n    event RequesterUpdated(\n        uint256 indexed requesterIndex,\n        address admin\n        );\n\n    event ClientEndorsementStatusUpdated(\n        uint256 indexed requesterIndex,\n        address indexed clientAddress,\n        bool endorsementStatus\n        );\n\n    function createRequester(address admin)\n        external\n        returns (uint256 requesterIndex);\n\n    function updateRequesterAdmin(\n        uint256 requesterIndex,\n        address admin\n        )\n        external;\n\n    function updateClientEndorsementStatus(\n        uint256 requesterIndex,\n        address clientAddress,\n        bool endorsementStatus\n        )\n        external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}