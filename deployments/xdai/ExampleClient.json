{
  "address": "0x794aA4ac99BFd4109800F0953A33548f107b0EC5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnodeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "data",
          "type": "int256"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "airnode",
      "outputs": [
        {
          "internalType": "contract IAirnode",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airnodeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "_airnodeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterInd",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "date",
          "type": "bytes32"
        }
      ],
      "name": "encodeAndMakeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "statusCode",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "data",
          "type": "int256"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fulfilledData",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "incomingFulfillments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "providerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "requesterInd",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "designatedWallet",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "makeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ce2468fdb416f7ffd124479277081e79b374d77a9d803a3e5a779b0f4089a2b",
  "receipt": {
    "to": null,
    "from": "0x1Da10cDEc44538E1854791b8e71FA4Ef05b4b238",
    "contractAddress": "0x794aA4ac99BFd4109800F0953A33548f107b0EC5",
    "transactionIndex": 2,
    "gasUsed": "617318",
    "logsBloom": "0x
    "blockHash": "0x6e406e67ebea3d168be9489aeedf43b02624aeb2cc53907658bb3f0357d0a16c",
    "transactionHash": "0x0ce2468fdb416f7ffd124479277081e79b374d77a9d803a3e5a779b0f4089a2b",
    "logs": [],
    "blockNumber": 14462654,
    "cumulativeGasUsed": "1467482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x32D228B5d44Fd18FefBfd68BfE5A5F3f75C873AE"
  ],
  "solcInputHash": "17033b6f85a889af92c245db4c68c7eb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnodeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airnode\",\"outputs\":[{\"internalType\":\"contract IAirnode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airnodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_airnodeAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterInd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"date\",\"type\":\"bytes32\"}],\"name\":\"encodeAndMakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fulfilledData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"incomingFulfillments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requesterInd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"designatedWallet\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"makeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airnodeAddress()\":{\"returns\":{\"_airnodeAddress\":\"Airnode contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airnodeAddress()\":{\"notice\":\"Returns the Airnode contract address used by this client\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExampleClient.sol\":\"ExampleClient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol/contracts/AirnodeClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IAirnodeClient.sol\\\";\\nimport \\\"./interfaces/IAirnode.sol\\\";\\n\\n\\n/// @title The contract to be inherited from to use Airnode to make requests\\ncontract AirnodeClient is IAirnodeClient {\\n    IAirnode public airnode;\\n\\n    /// @dev Airnode address is set at deployment. If you need to be able to\\n    /// update it, you will have to implement that functionality (and probably\\n    /// put it behind onlyOwner).\\n    /// @param airnodeAddress Airnode contract address\\n    constructor (address airnodeAddress)\\n        public\\n    {\\n        airnode = IAirnode(airnodeAddress);\\n    }\\n\\n    /// @notice Returns the Airnode contract address used by this client\\n    /// @return _airnodeAddress Airnode contract address\\n    function airnodeAddress()\\n        external\\n        view\\n        override\\n        returns(address _airnodeAddress)\\n    {\\n        _airnodeAddress = address(airnode);\\n    }\\n\\n    /// @dev Reverts if the caller is not the Airnode contract\\n    /// Use it as a modifier for fulfill and error callback methods\\n    modifier onlyAirnode()\\n    {\\n        require(\\n            msg.sender == address(airnode),\\n            \\\"Caller not the Airnode contract\\\"\\n            );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd04ddf98d49a53bffd7c9fadd9a989311626a5a7db93e91d709ec533b8d3c40e\",\"license\":\"MIT\"},\"@api3/airnode-protocol/contracts/interfaces/IAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IEndpointStore.sol\\\";\\nimport \\\"./ITemplateStore.sol\\\";\\n\\n\\ninterface IAirnode is IEndpointStore, ITemplateStore {\\n    event ClientRequestCreated(\\n        bytes32 indexed providerId,\\n        bytes32 indexed requestId,\\n        uint256 noRequests,\\n        address clientAddress,\\n        bytes32 templateId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes parameters\\n        );\\n\\n    event ClientShortRequestCreated(\\n        bytes32 indexed providerId,\\n        bytes32 indexed requestId,\\n        uint256 noRequests,\\n        address clientAddress,\\n        bytes32 templateId,\\n        bytes parameters\\n        );\\n\\n    event ClientFullRequestCreated(\\n        bytes32 indexed providerId,\\n        bytes32 indexed requestId,\\n        uint256 noRequests,\\n        address clientAddress,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes parameters\\n        );\\n\\n    event ClientRequestFulfilled(\\n        bytes32 indexed providerId,\\n        bytes32 indexed requestId,\\n        uint256 statusCode,\\n        bytes32 data\\n        );\\n\\n    event ClientRequestFulfilledWithBytes(\\n        bytes32 indexed providerId,\\n        bytes32 indexed requestId,\\n        uint256 statusCode,\\n        bytes data\\n        );\\n\\n    event ClientRequestFailed(\\n        bytes32 indexed providerId,\\n        bytes32 indexed requestId\\n        );\\n\\n    function makeRequest(\\n        bytes32 templateId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes calldata parameters\\n        )\\n        external\\n        returns (bytes32 requestId);\\n\\n    function makeShortRequest(\\n        bytes32 templateId,\\n        bytes calldata parameters\\n        )\\n        external\\n        returns (bytes32 requestId);\\n\\n    function makeFullRequest(\\n        bytes32 providerId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes calldata parameters\\n        )\\n        external\\n        returns (bytes32 requestId);\\n\\n    function fulfill(\\n        bytes32 requestId,\\n        bytes32 providerId,\\n        uint256 statusCode,\\n        bytes32 data,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n        external\\n        returns(\\n            bool callSuccess,\\n            bytes memory callData\\n        );\\n\\n    function fulfillBytes(\\n        bytes32 requestId,\\n        bytes32 providerId,\\n        uint256 statusCode,\\n        bytes calldata data,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n        external\\n        returns(\\n            bool callSuccess,\\n            bytes memory callData\\n        );\\n\\n    function fail(\\n        bytes32 requestId,\\n        bytes32 providerId,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0x3633bf108a9460d9ac8328882ddfaefe64e7d3e25b503aea642cf411b11eb172\",\"license\":\"MIT\"},\"@api3/airnode-protocol/contracts/interfaces/IAirnodeClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\ninterface IAirnodeClient {\\n  function airnodeAddress()\\n      external\\n      view\\n      returns(address _airnodeAddress);\\n}\\n\",\"keccak256\":\"0x45182ee04b3e5b3c8b8ecebde0b22f08542a9997332a34666063b28d2c089766\",\"license\":\"MIT\"},\"@api3/airnode-protocol/contracts/interfaces/IEndpointStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IProviderStore.sol\\\";\\n\\n\\ninterface IEndpointStore is IProviderStore {\\n    event EndpointUpdated(\\n        bytes32 indexed providerId,\\n        bytes32 indexed endpointId,\\n        address[] authorizers\\n        );\\n\\n    function updateEndpointAuthorizers(\\n        bytes32 providerId,\\n        bytes32 endpointId,\\n        address[] calldata authorizers\\n        )\\n        external;\\n\\n    function getEndpointAuthorizers(\\n        bytes32 providerId,\\n        bytes32 endpointId\\n        )\\n        external\\n        view\\n        returns(address[] memory authorizers);\\n}\\n\",\"keccak256\":\"0x05f163e0438d1b0e149e85a01b57adfe8ca1bbd6383aa9995f28974b3c160d92\",\"license\":\"MIT\"},\"@api3/airnode-protocol/contracts/interfaces/IProviderStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IRequesterStore.sol\\\";\\n\\n\\ninterface IProviderStore is IRequesterStore {\\n    event ProviderCreated(\\n        bytes32 indexed providerId,\\n        address admin,\\n        string xpub\\n        );\\n\\n    event ProviderUpdated(\\n        bytes32 indexed providerId,\\n        address admin\\n        );\\n\\n    event WithdrawalRequested(\\n        bytes32 indexed providerId,\\n        uint256 indexed requesterIndex,\\n        bytes32 indexed withdrawalRequestId,\\n        address designatedWallet,\\n        address destination\\n        );\\n\\n    event WithdrawalFulfilled(\\n        bytes32 indexed providerId,\\n        uint256 indexed requesterIndex,\\n        bytes32 indexed withdrawalRequestId,\\n        address designatedWallet,\\n        address destination,\\n        uint256 amount\\n        );\\n\\n    function createProvider(\\n        address admin,\\n        string calldata xpub\\n        )\\n        external\\n        payable\\n        returns (bytes32 providerId);\\n\\n    function updateProvider(\\n        bytes32 providerId,\\n        address admin\\n        )\\n        external;\\n\\n    function requestWithdrawal(\\n        bytes32 providerId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address destination\\n    )\\n        external;\\n\\n    function fulfillWithdrawal(\\n        bytes32 withdrawalRequestId,\\n        bytes32 providerId,\\n        uint256 requesterIndex,\\n        address destination\\n        )\\n        external\\n        payable;\\n\\n    function getProvider(bytes32 providerId)\\n        external\\n        view\\n        returns (\\n            address admin,\\n            string memory xpub\\n        );\\n}\\n\",\"keccak256\":\"0xddd0cdc763f155396b24755547cdbe186a0dbc36e46fc01b27840304a123da47\",\"license\":\"MIT\"},\"@api3/airnode-protocol/contracts/interfaces/IRequesterStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\ninterface IRequesterStore {\\n    event RequesterCreated(\\n        uint256 indexed requesterIndex,\\n        address admin\\n        );\\n\\n    event RequesterUpdated(\\n        uint256 indexed requesterIndex,\\n        address admin\\n        );\\n\\n    event ClientEndorsementStatusUpdated(\\n        uint256 indexed requesterIndex,\\n        address indexed clientAddress,\\n        bool endorsementStatus\\n        );\\n\\n    function createRequester(address admin)\\n        external\\n        returns (uint256 requesterIndex);\\n\\n    function updateRequesterAdmin(\\n        uint256 requesterIndex,\\n        address admin\\n        )\\n        external;\\n\\n    function updateClientEndorsementStatus(\\n        uint256 requesterIndex,\\n        address clientAddress,\\n        bool endorsementStatus\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0xbc741b5a318ba37e7071771f66e1563d8cd6aa31270ef39827301df9f1b139dc\",\"license\":\"MIT\"},\"@api3/airnode-protocol/contracts/interfaces/ITemplateStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\ninterface ITemplateStore {\\n    event TemplateCreated(\\n        bytes32 indexed templateId,\\n        bytes32 providerId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes parameters\\n        );\\n\\n    function createTemplate(\\n        bytes32 providerId,\\n        bytes32 endpointId,\\n        uint256 requesterIndex,\\n        address designatedWallet,\\n        address fulfillAddress,\\n        bytes4 fulfillFunctionId,\\n        bytes calldata parameters\\n        )\\n        external\\n        returns (bytes32 templateId);\\n\\n    function getTemplate(bytes32 templateId)\\n        external\\n        view\\n        returns (\\n            bytes32 providerId,\\n            bytes32 endpointId,\\n            uint256 requesterIndex,\\n            address designatedWallet,\\n            address fulfillAddress,\\n            bytes4 fulfillFunctionId,\\n            bytes memory parameters\\n        );\\n}\\n\",\"keccak256\":\"0x29b3b5e14d744b63e4e6fcfefdfb32d7a0ef43280218666b60c6450e2ab5a935\",\"license\":\"MIT\"},\"contracts/ExampleClient.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.6.12;\\n\\nimport \\\"@api3/airnode-protocol/contracts/AirnodeClient.sol\\\";\\n\\n\\ncontract ExampleClient is AirnodeClient {\\n    event RequestMade(bytes32 indexed requestId);\\n    event RequestFulfilled(bytes32 indexed requestId, int256 data);\\n\\n    mapping(bytes32 => bool) public incomingFulfillments;\\n    mapping(bytes32 => int256) public fulfilledData;\\n\\n    constructor (address airnodeAddress)\\n        public\\n        AirnodeClient(airnodeAddress)\\n    {}\\n\\n    // Parameters are encoded off-chain\\n    function makeRequest(\\n        bytes32 providerId,\\n        bytes32 endpointId,\\n        uint256 requesterInd,\\n        address designatedWallet,\\n        bytes calldata parameters\\n        )\\n        external\\n    {\\n        bytes32 requestId = airnode.makeFullRequest(\\n            providerId,\\n            endpointId,\\n            requesterInd,\\n            designatedWallet,\\n            address(this),\\n            this.fulfill.selector,\\n            parameters\\n            );\\n        incomingFulfillments[requestId] = true;\\n        emit RequestMade(requestId);\\n    }\\n\\n    // Parameters are encoded on-chain, refer to:\\n    // https://github.com/api3dao/api3-docs/blob/e793f7ec876e0a8e042f92388c6686f639c80458/airnode/airnode-abi-specifications.md\\n    function encodeAndMakeRequest(\\n        bytes32 providerId,\\n        bytes32 endpointId,\\n        uint256 requesterInd,\\n        address designatedWallet,\\n        bytes32 id,\\n        bytes32 date\\n        )\\n        external\\n    {\\n        bytes memory parameters = abi.encode(\\n            bytes32(\\\"1bb\\\"),\\n            bytes32(\\\"id\\\"), id,\\n            bytes32(\\\"date\\\"), date\\n            );\\n        bytes32 requestId = airnode.makeFullRequest(\\n            providerId,\\n            endpointId,\\n            requesterInd,\\n            designatedWallet,\\n            address(this),\\n            this.fulfill.selector,\\n            parameters\\n            );\\n        incomingFulfillments[requestId] = true;\\n        emit RequestMade(requestId);\\n    }\\n\\n    function fulfill(\\n        bytes32 requestId,\\n        uint256 statusCode,\\n        int256 data\\n        )\\n        external\\n        onlyAirnode()\\n    {\\n        require(incomingFulfillments[requestId], \\\"No such request made\\\");\\n        delete incomingFulfillments[requestId];\\n        if (statusCode == 0)\\n        {\\n            fulfilledData[requestId] = data;\\n        }\\n        emit RequestFulfilled(requestId, data);\\n    }\\n}\\n\",\"keccak256\":\"0x02934cfdf68147fc1f1822aa17f9fd4a4982363c755a0455a35a506fd9ef2569\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a68380380610a688339818101604052602081101561003357600080fd5b810190808051906020019092919050505080806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506109d2806100966000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a36ff4d81161005b578063a36ff4d8146101f1578063bd3b93a814610225578063d0bdd66c14610267578063dd2ae83f1461029b5761007d565b8063406c6d6c146100825780636c521b35146100c4578063969980a41461013a575b600080fd5b6100ae6004803603602081101561009857600080fd5b81019080803590602001909291905050506102df565b6040518082815260200191505060405180910390f35b610138600480360360c08110156100da57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506102f7565b005b6101ef600480360360a081101561015057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156101ab57600080fd5b8201836020820111156101bd57600080fd5b803590602001918460018302840111640100000000831117156101df57600080fd5b9091929391929390505050610597565b005b6101f9610759565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102656004803603606081101561023b57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061077d565b005b61026f610953565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102c7600480360360208110156102b157600080fd5b810190808035906020019092919050505061097c565b60405180821515815260200191505060405180910390f35b60026020528060005260406000206000915090505481565b60607f31626200000000000000000000000000000000000000000000000000000000007f6964000000000000000000000000000000000000000000000000000000000000847f6461746500000000000000000000000000000000000000000000000000000000856040516020018086815260200185815260200184815260200183815260200182815260200195505050505050604051602081830303815290604052905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dce9c276898989893063bd3b93a860e01b896040518863ffffffff1660e01b8152600401808881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104a657808201518184015260208101905061048b565b50505050905090810190601f1680156104d35780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156104f857600080fd5b505af115801561050c573d6000803e3d6000fd5b505050506040513d602081101561052257600080fd5b81019080805190602001909291905050509050600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550807f10534462e93227be609c7aac7dd4edb02566a0c1e94fa3f6078cfdcf1077398860405160405180910390a25050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dce9c276888888883063bd3b93a860e01b8a8a6040518963ffffffff1660e01b8152600401808981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509950505050505050505050602060405180830381600087803b1580156106bb57600080fd5b505af11580156106cf573d6000803e3d6000fd5b505050506040513d60208110156106e557600080fd5b81019080805190602001909291905050509050600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550807f10534462e93227be609c7aac7dd4edb02566a0c1e94fa3f6078cfdcf1077398860405160405180910390a250505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616c6c6572206e6f7420746865204169726e6f646520636f6e74726163740081525060200191505060405180910390fd5b6001600084815260200190815260200160002060009054906101000a900460ff166108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f20737563682072657175657374206d61646500000000000000000000000081525060200191505060405180910390fd5b6001600084815260200190815260200160002060006101000a81549060ff02191690556000821415610916578060026000858152602001908152602001600020819055505b827f0880bb44c8fc43ddef9ba9b31e64f02347aae031e2c3f124ed7bdeeee31d81ff826040518082815260200191505060405180910390a2505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915054906101000a900460ff168156fea264697066735822122088eabf9260b81f5ac812d5f1dc4154ae92e996105a786a9eee827988a087aefb64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a36ff4d81161005b578063a36ff4d8146101f1578063bd3b93a814610225578063d0bdd66c14610267578063dd2ae83f1461029b5761007d565b8063406c6d6c146100825780636c521b35146100c4578063969980a41461013a575b600080fd5b6100ae6004803603602081101561009857600080fd5b81019080803590602001909291905050506102df565b6040518082815260200191505060405180910390f35b610138600480360360c08110156100da57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506102f7565b005b6101ef600480360360a081101561015057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156101ab57600080fd5b8201836020820111156101bd57600080fd5b803590602001918460018302840111640100000000831117156101df57600080fd5b9091929391929390505050610597565b005b6101f9610759565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102656004803603606081101561023b57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061077d565b005b61026f610953565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102c7600480360360208110156102b157600080fd5b810190808035906020019092919050505061097c565b60405180821515815260200191505060405180910390f35b60026020528060005260406000206000915090505481565b60607f31626200000000000000000000000000000000000000000000000000000000007f6964000000000000000000000000000000000000000000000000000000000000847f6461746500000000000000000000000000000000000000000000000000000000856040516020018086815260200185815260200184815260200183815260200182815260200195505050505050604051602081830303815290604052905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dce9c276898989893063bd3b93a860e01b896040518863ffffffff1660e01b8152600401808881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104a657808201518184015260208101905061048b565b50505050905090810190601f1680156104d35780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156104f857600080fd5b505af115801561050c573d6000803e3d6000fd5b505050506040513d602081101561052257600080fd5b81019080805190602001909291905050509050600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550807f10534462e93227be609c7aac7dd4edb02566a0c1e94fa3f6078cfdcf1077398860405160405180910390a25050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dce9c276888888883063bd3b93a860e01b8a8a6040518963ffffffff1660e01b8152600401808981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509950505050505050505050602060405180830381600087803b1580156106bb57600080fd5b505af11580156106cf573d6000803e3d6000fd5b505050506040513d60208110156106e557600080fd5b81019080805190602001909291905050509050600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550807f10534462e93227be609c7aac7dd4edb02566a0c1e94fa3f6078cfdcf1077398860405160405180910390a250505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616c6c6572206e6f7420746865204169726e6f646520636f6e74726163740081525060200191505060405180910390fd5b6001600084815260200190815260200160002060009054906101000a900460ff166108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f20737563682072657175657374206d61646500000000000000000000000081525060200191505060405180910390fd5b6001600084815260200190815260200160002060006101000a81549060ff02191690556000821415610916578060026000858152602001908152602001600020819055505b827f0880bb44c8fc43ddef9ba9b31e64f02347aae031e2c3f124ed7bdeeee31d81ff826040518082815260200191505060405180910390a2505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915054906101000a900460ff168156fea264697066735822122088eabf9260b81f5ac812d5f1dc4154ae92e996105a786a9eee827988a087aefb64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airnodeAddress()": {
        "returns": {
          "_airnodeAddress": "Airnode contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airnodeAddress()": {
        "notice": "Returns the Airnode contract address used by this client"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "airnode",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAirnode)240"
      },
      {
        "astId": 500,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "incomingFulfillments",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 504,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "fulfilledData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_int256)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAirnode)240": {
        "encoding": "inplace",
        "label": "contract IAirnode",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_int256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      }
    }
  }
}